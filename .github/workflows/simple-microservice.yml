name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: 'gitea.homelab.int.zengarden.space'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.server_url == 'https://gitea.homelab.int.zengarden.space'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
      repo-name: ${{ steps.repo-name.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract repository name
        id: repo-name
        shell: bash
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          echo "name=$repo_name" >> $GITHUB_OUTPUT
          echo "Repository name: $repo_name"

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Lint Helm chart
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          chart_path="./helm/$repo_name"
          helm lint "$chart_path"
          find .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_WRITE_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract image tag
        id: extract-tag
        shell: bash
        run: |
          echo "${{ steps.meta.outputs.tags }}"
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tail -n 1 | cut -d':' -f2)
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Extracted tag: $IMAGE_TAG"

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          token: ${{ secrets.EXTERNAL_GITHUB_COM_TOKEN }}
          version: 'v0.67.2'
          cache: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-tag.outputs.tag }}'
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-setup-trivy: true
        env:
          TRIVY_PLATFORM: 'linux/arm64'

      - name: Check values files existence
        id: check-values
        run: |
          if [ -f "./helm/values-dev.yaml" ]; then
            echo "dev-exists=true" >> $GITHUB_OUTPUT
            echo "Dev values file exists: ./helm/values-dev.yaml"
          else
            echo "dev-exists=false" >> $GITHUB_OUTPUT
            echo "Dev values file not found: ./helm/values-dev.yaml"
          fi

          if [ -f "./helm/values-prod.yaml" ]; then
            echo "prod-exists=true" >> $GITHUB_OUTPUT
            echo "Prod values file exists: ./helm/values-prod.yaml"
          else
            echo "prod-exists=false" >> $GITHUB_OUTPUT
            echo "Prod values file not found: ./helm/values-prod.yaml"
          fi

      - name: Update Helm values (dev)
        if: steps.check-values.outputs.dev-exists == 'true'
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          IMAGE_TAG="${{ steps.extract-tag.outputs.tag }}"
          echo "Using tag: $IMAGE_TAG"
          chart_path="./helm/$repo_name"
          helm template $repo_name "$chart_path" \
            --namespace dev-$repo_name \
            --values ./helm/values-dev.yaml \
            --set image.tag=$IMAGE_TAG > manifest-dev.yaml

      - name: Update Helm values (prod)
        if: steps.check-values.outputs.prod-exists == 'true'
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          IMAGE_TAG="${{ steps.extract-tag.outputs.tag }}"
          echo "Using tag: $IMAGE_TAG"
          chart_path="./helm/$repo_name"
          helm template $repo_name "$chart_path" \
            --namespace prod-$repo_name \
            --values ./helm/values-prod.yaml \
            --set image.tag=$IMAGE_TAG > manifest-prod.yaml

      - name: Checkout manifests repository
        if: steps.check-values.outputs.dev-exists == 'true' || steps.check-values.outputs.prod-exists == 'true'
        uses: actions/checkout@v4
        with:
          repository: 'zengarden-space/manifests'
          ref: 'main'
          path: manifests
          token: ${{ secrets.CONTENT_WRITE_TOKEN }}

      - name: Push changes to dev
        if: steps.check-values.outputs.dev-exists == 'true'
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          cd manifests
          git config --local user.name "Gitea Actions Bot"
          git config --local user.email "gitea-actions[bot]@users.noreply.zengarden.space"

          # Retry loop for git operations
          for attempt in {1..5}; do
            echo "Attempt $attempt of 5"

            # Pull latest changes
            if ! git pull origin main; then
              echo "Failed to pull on attempt $attempt"
              continue
            fi

            # Copy manifest and add files
            mkdir -p ./homelab/dev/$repo_name
            cp ../manifest-dev.yaml ./homelab/dev/$repo_name/manifest.yaml
            git add .

            # Check if there are changes to commit
            if git diff --cached --quiet; then
              echo "No changes to commit"
              break
            fi

            # Commit changes
            if ! git commit -m "${{ github.repository }}: ${{ github.event.head_commit.message }} ${{github.sha}}"; then
              echo "Failed to commit on attempt $attempt"
              git reset --hard HEAD
              continue
            fi

            # Try to push
            if git push origin main; then
              echo "Successfully pushed on attempt $attempt"
              break
            else
              echo "Failed to push on attempt $attempt, discarding commit"
              git reset --hard HEAD~1

              if [ $attempt -eq 5 ]; then
                echo "Failed to push after 5 attempts"
                exit 1
              fi

              sleep $((attempt * 2))  # Exponential backoff
            fi
          done

      - name: Check for existing PR
        if: steps.check-values.outputs.prod-exists == 'true'
        id: check_pr
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          cd manifests

          # Check if PR exists using Gitea API - fetch all open PRs and filter with jq
          pr_exists=$(curl -s -H "Authorization: token ${{ secrets.CONTENT_WRITE_TOKEN }}" \
            "https://gitea.homelab.int.zengarden.space/api/v1/repos/zengarden-space/manifests/pulls?state=open" \
            | jq --arg branch "prod-$repo_name" '[.[] | select(.head.ref == $branch)] | length')

          echo "pr_exists=$pr_exists" >> $GITHUB_OUTPUT
          echo "Found $pr_exists existing PRs for branch prod-$repo_name"

      - name: Create production branch and push changes
        if: steps.check-values.outputs.prod-exists == 'true'
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          cd manifests
          git config --local user.name "Gitea Actions Bot"
          git config --local user.email "gitea-actions[bot]@users.noreply.zengarden.space"

          # Create and switch to production branch
          git checkout -B prod-$repo_name

          # Create directory and copy manifest
          mkdir -p ./homelab/prod/$repo_name
          cp ../manifest-prod.yaml ./homelab/prod/$repo_name/manifest.yaml
          git add .

          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "Deploy ${{ github.repository }} to production: ${{ github.event.head_commit.message }} ${{github.sha}}"
            git push -f origin prod-$repo_name
          else
            echo "No changes to commit"
          fi

      - name: Create Pull Request
        if: steps.check-values.outputs.prod-exists == 'true' && steps.check_pr.outputs.pr_exists == '0'
        run: |
          repo_name=$(echo ${{github.repository}} | cut -d'/' -f2)
          commit_msg=$(echo '${{ github.event.head_commit.message }}' | sed 's/"/\\"/g')

          # Create PR using Gitea API
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.CONTENT_WRITE_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://gitea.homelab.int.zengarden.space/api/v1/repos/zengarden-space/manifests/pulls" \
            -d @- <<EOF
          {
            "title": "Deploy $repo_name to production",
            "body": "Auto-generated PR to deploy ${{ github.repository }} to production environment.\n\nCommit: ${{ github.sha }}\nMessage: ${commit_msg}",
            "head": "prod-$repo_name",
            "base": "main"
          }
          EOF
          )

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          echo "HTTP Status Code: $http_code"
          echo "Response Body: $body"

          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "Pull request created successfully"
          else
            echo "Failed to create pull request"
            exit 1
          fi