apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-token-generator
spec:
  template:
    spec:
      serviceAccountName: gitea-token-generator
      restartPolicy: Never
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - name: generate-token-and-create-secret
        image: bitnami/kubectl:1.33.1
        command: ['sh', '-c']
        args:
        - |
          set -e
          
          echo "Waiting for Gitea pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=gitea -n gitea --timeout=300s
          echo "Gitea pods are ready"
          
          echo "Finding a running Gitea pod in gitea namespace..."
          GITEA_POD=$(kubectl get pods -n gitea -l app=gitea -o jsonpath='{.items[0].metadata.name}')
          
          if [ -z "$GITEA_POD" ]; then
            echo "Error: No Gitea pod found"
            exit 1
          fi
          
          echo "Found Gitea pod: $GITEA_POD"
          
          echo "Generating runner token using kubectl exec..."
          TOKEN=$(kubectl exec -n gitea "$GITEA_POD" -- gitea actions generate-runner-token)
          
          if [ -z "$TOKEN" ]; then
            echo "Error: Failed to generate token"
            exit 1
          fi
          
          echo "Successfully generated runner registration token"
          echo "Token length: $(echo -n "$TOKEN" | wc -c) characters"
          
          echo "Creating secret with token..."
          cat << EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: gitea-action-runner
            namespace: {{ .Release.Namespace }}
          stringData:
            token: "$TOKEN"
          EOF
          
          echo "Secret created successfully"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
