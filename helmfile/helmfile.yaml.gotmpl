repositories:
  # Add all repositories used in the helm scripts
  - name: metallb
    url: https://metallb.github.io/metallb
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: jetstack
    url: https://charts.jetstack.io
  - name: argo
    url: https://argoproj.github.io/argo-helm
  - name: cockroachdb
    url: https://charts.cockroachdb.com/
  - name: external-dns
    url: https://kubernetes-sigs.github.io/external-dns/
  - name: gitea
    url: https://dl.gitea.io/charts
  - name: rancher
    url: https://releases.rancher.com/server-charts/latest
  - name: vmware-tanzu
    url: https://vmware-tanzu.github.io/helm-charts
  - name: authelia
    url: https://charts.authelia.com
  - name: external-secrets
    url: https://charts.external-secrets.io

releases:
  - name: metallb
    namespace: metallb-system
    chart: metallb/metallb
    version: 0.14.5

  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.16.0
    values:
      - installCRDs: true

  - name: external-secrets
    namespace: external-secrets-system
    chart: external-secrets/external-secrets
    version: 0.10.4
    values:
      - installCRDs: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        webhook:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        certController:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault

  - name: trust-manager
    namespace: cert-manager
    chart: jetstack/trust-manager
    version: v0.12.0
    wait: true
    values:
      - app:
          trust:
            namespace: cert-manager
        secretTargets:
          enabled: true
          authorizedSecrets: ["internal-ca-bundle"]
    needs:
      - cert-manager

  - name: internal-ca
    namespace: cert-manager
    chart: charts/internal-ca
    needs:
      - trust-manager
      
  - name: external-dns
    namespace: external-dns
    chart: external-dns/external-dns
    version: 1.15.0
    values:
      - interval: 5s
        sources:
          - ingress
          - service
          - crd
        domainFilters:
          - zengarden.space
        provider:
          name: webhook
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          webhook:
            securityContext:
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              seccompProfile:
                type: RuntimeDefault
            image:
              repository: "ghcr.io/mirceanton/external-dns-provider-mikrotik"
              tag: "v1.4.4@sha256:d51055ef8f9311373e0b16057b34dbbb393a8f29248431f4ddd9279a417f602d"
              pullPolicy: IfNotPresent
            env:
              - name: LOG_FORMAT
                value: json
              - name: LOG_LEVEL
                value: debug
              - name: MIKROTIK_DEFAULT_TTL
                value: "1800"
              - name: MIKROTIK_DEFAULT_COMMENT
                value: Managed by ExternalDNS
              - name: MIKROTIK_BASEURL
                valueFrom:
                  secretKeyRef:
                    name: mikrotik-credentials
                    key: MIKROTIK_BASEURL
              - name: MIKROTIK_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: mikrotik-credentials
                    key: MIKROTIK_USERNAME
              - name: MIKROTIK_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mikrotik-credentials
                    key: MIKROTIK_PASSWORD
              - name: MIKROTIK_SKIP_TLS_VERIFY
                valueFrom:
                  secretKeyRef:
                    name: mikrotik-credentials
                    key: MIKROTIK_SKIP_TLS_VERIFY
            livenessProbe:
              httpGet:
                path: /healthz
                port: http-webhook
              initialDelaySeconds: 10
              timeoutSeconds: 5
            readinessProbe:
              httpGet:
                path: /readyz
                port: http-webhook
              initialDelaySeconds: 10
              timeoutSeconds: 5
        extraArgs:
          - --ignore-ingress-tls-spec
          - --managed-record-types=A
          - --managed-record-types=AAAA
          - --managed-record-types=CNAME
          - --managed-record-types=TXT
          - --managed-record-types=MX
          - --managed-record-types=SRV
          - --managed-record-types=NS

  - name: ingress-nginx
    namespace: ingress-nginx
    chart: ingress-nginx/ingress-nginx
    values:
      - controller:
          progressDeadlineSeconds: 10
          networkPolicy:
            enabled: true
        tcp:
          "22": "gitea/gitea-ssh:22"

  - name: authelia
    namespace: authelia
    chart: authelia/authelia
    version: 0.9.3
    values:
      - ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
          tls:
            enabled: true
            secret: authelia-tls
          rulesOverride:
            - host: auth.zengarden.space
              path: /
        configMap:
          session:
            cookies:
              - domain: zengarden.space
                default_redirection_url: https://www.auth.zengarden.space
            redis:
              enabled: true
              deploy: true
              host: authelia-redis-headless
          authentication_backend:
            password_reset:
              disable: true
            password_change:
              disable: true
            file:
              enabled: true
              path: /secrets/authelia-users/users_database.yml
          storage:
            postgres:
              enabled: true
              deploy: true
              address: 'tcp://authelia-postgresql:5432'
              password:
                value: authelia
          notifier:
            disable_startup_check: true
            smtp:
              enabled: true
              address: smtp://smtp.gmail.com:587
              sender: Authelia <noreply@zengarden.space>
              username: your-email@gmail.com
        secret:
          additionalSecrets:
            authelia-users:
              items:
                - key: users_database.yml
                  path: users_database.yml
        pod:
          kind: Deployment
          strategy:
            type: Recreate
          securityContext:
            container:
              runAsNonRoot: true
              runAsUser: 1000
              runAsGroup: 1000
              fsGroup: 1000
              seccompProfile:
                type: RuntimeDefault
            pod:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
        persistence:
          enabled: false

  - name: ingress-nginx-external
    namespace: external-tunnel
    chart: ingress-nginx/ingress-nginx
    values:
      - controller:
          ingressClassResource:
            name: external
            enabled: true
            default: false
            controllerValue: "k8s.io/ingress-nginx-external"
          ingressClass: external
          progressDeadlineSeconds: 10
          networkPolicy:
            enabled: true
          admissionWebhooks:
            enabled: false

  - name: cloudflare-tunnel
    namespace: external-tunnel
    chart: charts/cloudflare-tunnel
    values:
      - cloudflare:
          secretName: cloud-flare-tunnel-credentials
          ingress:
            - service: https://ingress-nginx-external-controller.external-tunnel.svc
              hostname: "zengarden.space"
              originRequest:
                  noTLSVerify: true
            - service: https://ingress-nginx-external-controller.external-tunnel.svc
              hostname: "*.zengarden.space"
              originRequest:
                  noTLSVerify: true          
        securityContext:
          seccompProfile:
            type: RuntimeDefault

  - name: vm
    namespace: victoria-metrics
    chart: oci://ghcr.io/victoriametrics/helm-charts/victoria-metrics-k8s-stack
    version: 0.48.1
    values:
      - grafana:
          ingress:
            enabled: true
            hosts:
              - grafana.zengarden.space
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
            tls:
              - secretName: grafana-tls
                hosts:
                  - grafana.zengarden.space
        prometheus-node-exporter:
          hostNetwork: false

  - name: node-exporter
    namespace: node-exporter
    chart: oci://registry-1.docker.io/bitnamicharts/node-exporter
    version: 4.5.13

  - name: argocd-config
    namespace: argocd
    chart: charts/argocd-config
    needs:
      - external-secrets

  - name: argocd
    namespace: argocd
    chart: argo/argo-cd
    needs:
      - argocd-config
    values:
      - createAggregateRoles: true

        global:
          domain: argocd.zengarden.space

        redis-ha:
          enabled: true

        controller:
          replicas: 1

        secret:
          createSecret: false

        server:
          autoscaling:
            enabled: true
            minReplicas: 2
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            extraTls:
              - hosts:
                  - argocd.zengarden.space
                secretName: argocd-tls

        repoServer:
          autoscaling:
            enabled: true
            minReplicas: 2

        applicationSet:
          replicas: 2

        configs:
          params:
            server.insecure: true

  - name: gitea
    namespace: gitea
    chart: gitea/gitea
    version: 11.0.0
    values:
      - replicaCount: 1
        gitea:
          admin:
            password: "MAKE EXTERNAL SECRET"
          actions:
            enabled: true
        persistence:
          enabled: true
          size: 50Gi
        metrics:
          enabled: true
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        podSecurityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        ingress:
          enabled: true
          className: nginx
          hosts:
            - host: gitea.zengarden.space
              paths:
                - path: /
                  pathType: Prefix
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/proxy-body-size: 500m
          tls:
            - hosts:
                - gitea.zengarden.space
              secretName: gitea-tls
        global:
          imagePullSecrets:
            - docker-hub
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 0
            maxUnavailable: 1
        deployment:
          env:
            - name: GITEA__ACTIONS__ENABLED
              value: "true"
            - name: GITEA__WEBHOOK_ALLOWED_HOST_LIST
              value: "*"
        postgresql-ha:
          service:
            ports:
              postgresql: 5432
        valkey-cluster:
          service:
            ports:
              valkey: 6379

  - name: gitea-runner
    namespace: gitea-runner
    chart: charts/gitea-runner

#  - name: velero
#    namespace: velero
#    chart: vmware-tanzu/velero
#    version: 7.0.0
#    values:
#      - configuration:
#          backupStorageLocation:
#          - name: default
#            bucket: blade-cluster-zengarden-space
#            default: true
#            provider: aws
#            credential:
#              name: test-credential
#              key: test-key
#            config:
#              region: eu-central-1
#              profile: eu-central-1-profile
#          volumeSnapshotLocation:
#          - name: blade-cluster-zengarden-space
#            provider: aws
#            config:
#              region: eu-central-1
#        initContainers:
#          - name: velero-plugin-for-aws
#            image: velero/velero-plugin-for-aws:v1.8.0
#            volumeMounts:
#              - mountPath: /target
#                name: plugins
#        credentials:
#          useSecret: true
#          secretContents:
#            cloud: |
#              [default]
#              aws_access_key_id = admin
#              aws_secret_access_key = {{ .Values.minio.password | quote }}
#        schedules:
#          all-namespaces-daily:
#            schedule: "0 0 * * *"
#            template:
#              ttl: "240h"
#              includedNamespaces:
#                - "*"
