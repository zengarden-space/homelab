{{- if .Values.personalAccessTokens.enabled }}
{{- range $tokenName, $tokenConfig := .Values.personalAccessTokens.tokens }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "gitea-automation.fullname" $ }}-token-{{ $tokenName }}-{{ $tokenConfig.scopes | sha1sum | trunc 7 }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "gitea-automation.labels" $ | nindent 4 }}
    app.kubernetes.io/component: pat-generator
spec:
  backoffLimit: {{ $.Values.job.backoffLimit }}
  template:
    metadata:
      labels:
        {{- include "gitea-automation.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: pat-generator
    spec:
      restartPolicy: {{ $.Values.job.restartPolicy }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
      - name: pat-generator
        image: bitnami/kubectl:1.33.1
        imagePullPolicy: {{ $.Values.job.image.pullPolicy }}
        securityContext:
          {{- toYaml $.Values.job.securityContext | nindent 10 }}
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          
          echo "Waiting for Gitea pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=gitea -n gitea --timeout=300s
          echo "Gitea pods are ready"
          
          echo "Finding a running Gitea pod in gitea namespace..."
          GITEA_POD=$(kubectl get pods -n gitea -l app=gitea -o jsonpath='{.items[0].metadata.name}')
          
          if [ -z "$GITEA_POD" ]; then
            echo "Error: No Gitea pod found"
            exit 1
          fi

          # Check if secret already exists with correct scopes
          echo "Checking if secret {{ $tokenName }} already exists..."
          if kubectl get secret {{ $tokenName }} -n {{ $.Release.Namespace }} >/dev/null 2>&1; then
            echo "Secret {{ $tokenName }} exists. Checking scopes..."
            EXISTING_SCOPES=$(kubectl get secret {{ $tokenName }} -n {{ $.Release.Namespace }} -o jsonpath='{.data.scopes}' | base64 -d)
            EXISTING_USER=$(kubectl get secret {{ $tokenName }} -n {{ $.Release.Namespace }} -o jsonpath='{.data.user}' | base64 -d)
            EXISTING_TOKEN=$(kubectl get secret {{ $tokenName }} -n {{ $.Release.Namespace }} -o jsonpath='{.data.token}' | base64 -d)
            
            if [ "$EXISTING_SCOPES" = "{{ $tokenConfig.scopes }}" ] && [ "$EXISTING_USER" = "{{ $tokenConfig.user }}" ] && [ -n "$EXISTING_TOKEN" ]; then
              echo "✅ Secret {{ $tokenName }} already exists with correct scopes and user. Skipping token generation."
              exit 0
            else
              echo "⚠️  Secret {{ $tokenName }} exists but has different scopes or user. Current: '$EXISTING_SCOPES' for user '$EXISTING_USER', Expected: '{{ $tokenConfig.scopes }}' for user '{{ $tokenConfig.user }}'"
              echo "Deleting existing secret and regenerating token..."
              kubectl delete secret {{ $tokenName }} -n {{ $.Release.Namespace }}
            fi
          else
            echo "Secret {{ $tokenName }} does not exist. Will create new token."
          fi

          # Execute gitea command inside gitea container to generate token
          echo "Generating new access token..."
          TOKEN=$(kubectl exec -n {{ $.Values.gitea.service.namespace }} $GITEA_POD -- \
            gitea admin user generate-access-token \
            --username {{ $tokenConfig.user }} \
            --token-name {{ $tokenName }}-{{ $tokenConfig.scopes | sha1sum | trunc 7 }} \
            --scopes {{ $tokenConfig.scopes | quote }} \
            --raw)
          
          if [ -z "$TOKEN" ]; then
            echo "❌ Failed to generate token"
            exit 1
          fi
          
          echo "✅ Token generated successfully. Creating secret..."
          
          # Create the secret
          kubectl create secret generic {{ $tokenName }} \
            --from-literal=token="$TOKEN" \
            --from-literal=scopes="{{ $tokenConfig.scopes }}" \
            --from-literal=user="{{ $tokenConfig.user }}" \
            -n {{ $.Release.Namespace }}
          
          echo "✅ Secret {{ $tokenName }} created successfully"
      serviceAccountName: {{ include "gitea-automation.fullname" $ }}-pat-generator
{{- end }}
{{- end }}
