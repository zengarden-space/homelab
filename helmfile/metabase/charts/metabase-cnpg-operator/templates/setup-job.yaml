apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "metabase-cnpg-operator.fullname" . }}-setup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "metabase-cnpg-operator.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        {{- include "metabase-cnpg-operator.selectorLabels" . | nindent 8 }}
        job: metabase-setup
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: setup
        image: curlimages/curl:8.5.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        env:
        - name: METABASE_URL
          value: {{ .Values.metabase.url | quote }}
        - name: METABASE_ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: {{ include "metabase-cnpg-operator.fullname" . }}
              key: admin-email
        - name: METABASE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "metabase-cnpg-operator.fullname" . }}
              key: admin-password
        command:
        - /bin/sh
        - -c
        - |
          set -e

          echo "Waiting for Metabase to be ready..."
          MAX_ATTEMPTS=60
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -s -f "${METABASE_URL}/api/health" > /dev/null 2>&1; then
              echo "Metabase is healthy"
              break
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Waiting for Metabase... attempt $ATTEMPT/$MAX_ATTEMPTS"
            sleep 5
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "ERROR: Metabase did not become healthy in time"
            exit 1
          fi

          # Check if setup is already done
          echo "Checking if Metabase is already set up..."
          PROPERTIES=$(curl -s "${METABASE_URL}/api/session/properties")
          SETUP_TOKEN=$(echo "$PROPERTIES" | grep -o '"setup-token":"[^"]*"' | cut -d'"' -f4 || echo "")

          if [ -z "$SETUP_TOKEN" ] || [ "$SETUP_TOKEN" = "null" ]; then
            echo "Metabase is already set up (no setup token), verifying credentials..."

            # Try to authenticate with provided credentials
            SESSION_RESPONSE=$(curl -s -X POST "${METABASE_URL}/api/session" \
              -H "Content-Type: application/json" \
              -d "{\"username\":\"${METABASE_ADMIN_EMAIL}\",\"password\":\"${METABASE_ADMIN_PASSWORD}\"}")

            SESSION_ID=$(echo "$SESSION_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 || echo "")

            if [ -n "$SESSION_ID" ] && [ "$SESSION_ID" != "null" ]; then
              echo "✓ Successfully authenticated with existing credentials"
              echo "Metabase is ready to use!"
              exit 0
            else
              echo "⚠ WARNING: Metabase is already set up but provided credentials don't work"
              echo "This is expected if Metabase was set up manually or with different credentials"
              echo "Response: $SESSION_RESPONSE"
              # Don't fail - the operator can still work if credentials are correct
              exit 0
            fi
          fi

          echo "Setup token found, attempting to initialize Metabase..."
          echo "Setup token: $SETUP_TOKEN"

          # Perform initial setup
          SETUP_PAYLOAD=$(cat <<EOF
          {
            "token": "${SETUP_TOKEN}",
            "user": {
              "first_name": "Admin",
              "last_name": "User",
              "email": "${METABASE_ADMIN_EMAIL}",
              "password": "${METABASE_ADMIN_PASSWORD}",
              "site_name": "Metabase"
            },
            "prefs": {
              "site_name": "Metabase",
              "site_locale": "en",
              "allow_tracking": false
            }
          }
          EOF
          )

          echo "Sending setup request..."
          SETUP_RESPONSE=$(curl -s -X POST "${METABASE_URL}/api/setup" \
            -H "Content-Type: application/json" \
            -d "$SETUP_PAYLOAD")

          # Check if setup was successful by looking for an id in the response
          if echo "$SETUP_RESPONSE" | grep -q '"id"'; then
            echo "✓ Metabase setup completed successfully!"
            echo "Admin email: ${METABASE_ADMIN_EMAIL}"
            exit 0
          fi

          # Check if the error is because a user already exists (setup already done)
          if echo "$SETUP_RESPONSE" | grep -q "can only be used to create the first user"; then
            echo "✓ Metabase is already set up (user already exists)"

            # Verify we can authenticate
            SESSION_RESPONSE=$(curl -s -X POST "${METABASE_URL}/api/session" \
              -H "Content-Type: application/json" \
              -d "{\"username\":\"${METABASE_ADMIN_EMAIL}\",\"password\":\"${METABASE_ADMIN_PASSWORD}\"}")

            SESSION_ID=$(echo "$SESSION_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 || echo "")

            if [ -n "$SESSION_ID" ] && [ "$SESSION_ID" != "null" ]; then
              echo "✓ Successfully authenticated with existing credentials"
              echo "Metabase is ready to use!"
              exit 0
            else
              echo "⚠ WARNING: Metabase is already set up but provided credentials don't work"
              echo "Response: $SESSION_RESPONSE"
              exit 0
            fi
          fi

          # All other errors should fail the job
          echo "ERROR: Metabase setup failed"
          echo "Response: $SETUP_RESPONSE"

          # Check for specific validation errors
          if echo "$SETUP_RESPONSE" | grep -q "valid email"; then
            echo "ERROR: Admin email validation failed - check that METABASE_ADMIN_EMAIL is set correctly"
            exit 1
          fi
          if echo "$SETUP_RESPONSE" | grep -q "password"; then
            echo "ERROR: Password validation failed - check that METABASE_ADMIN_PASSWORD is set and not too common"
            exit 1
          fi

          exit 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}

