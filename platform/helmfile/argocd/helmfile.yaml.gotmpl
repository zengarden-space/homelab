environments:
  default:
    values:
      - env.yaml
---
helmDefaults:
  wait: true
  timeout: 600

repositories:
  - name: argo
    url: https://argoproj.github.io/argo-helm

releases:
  - name: argocd-config
    namespace: argocd
    chart: ./charts/argocd-config
    values:
      - domain: {{ .Values.domain }}
        application:
          git:
            repoURL: https://gitea.homelab.int.{{ .Values.domain }}/zengarden-space/manifests.git
            revision: main
            path: homelab

  - name: argocd
    namespace: argocd
    chart: argo/argo-cd
    needs:
      - argocd/argocd-config
    values:
      - createAggregateRoles: true

        global:
          domain: argocd.homelab.int.{{ .Values.domain }}

        redis-ha:
          enabled: true

        controller:
          replicas: 1

        server:
          autoscaling:
            enabled: true
            minReplicas: 2
          ingress:
            enabled: true
            ingressClassName: internal
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            extraTls:
              - hosts:
                  - argocd.homelab.int.{{ .Values.domain }}
                secretName: argocd-tls

        repoServer:
          autoscaling:
            enabled: true
            minReplicas: 2

        application:
          replicas: 2

        configs:
          secret:
            createSecret: false
          params:
            server.insecure: true
          cm:
            # Google OAuth configuration
            url: https://argocd.homelab.int.{{ .Values.domain }}
            dex.config: |
              connectors:
                - type: oidc
                  id: google
                  name: Google
                  config:
                    issuer: https://accounts.google.com
                    clientID: $argocd-google-oauth:clientId
                    clientSecret: $argocd-google-oauth:clientSecret
                    # Use email claim as username for RBAC matching
                    userIdKey: email
          rbac:
            # Disable built-in RBAC ConfigMap creation - managed by RBAC operator
            create: false
            # RBAC policy is managed by the RBAC operator via argocd-rbac-cm ConfigMap
            # The operator syncs User CRD roles to ArgoCD automatically
            # Scopes configuration (email claim usage) is also managed by the operator
            # See: system/helmfile/rbac-system/rbac-operator

