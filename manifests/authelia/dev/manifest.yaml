---
# Source: authelia/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: authelia/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: authelia-redis
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: authelia/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: authelia/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authelia-redis-master
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: authelia/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
automountServiceAccountToken: false
---
# Source: authelia/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: authelia-redis-master
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
---
# Source: authelia/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
type: Opaque
data:
  postgres-password: "YXV0aGVsaWE="
  password: "YXV0aGVsaWE="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: authelia/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: authelia
  labels: 
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/version: 4.38.9
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: authelia-0.9.3
data:
    identity_validation.reset_password.jwt.hmac.key: ZFp6NVl4Q0pIanh3UXhLUFRqY016MEpTcTF5YUdxamVxZEVWRmxJR1VqUGxXVll2d0lvY3QzeUpsejV6dGFJbWhxTWkxVEl0M0M0d1cxNElCNDhseklvd1liR3dGTlpQc0VtbUJ0bkJudmM3RmFORVNUck96NWpxN3dxZ0t3S1E=
    session.encryption.key: U3RZdUVGWTJoNmN0S0JsemxmUnBhZ0VMTkUxY05PbnNQQjh6VHdEY2Q0S1h2eTNEVFVqcEh0NWx2a0lvUjdHcWRSeXpWelBGRUVyT2NhR0JBSFpJVmlyZERVZ2VGeHJxa054NGJ1blMxVTIxbVJqeVlDOEdPdHV3ODlKMU5NUWE=
    session.redis.password.txt: SDJobGdHZWc4bGVXa1RTQmxXTW1ldTRNYmh1Q211Sm9QajFVdUhHOERJY0MzRWlERjJSTm1VQVZwNEhmcUlIeThVNG5GMGZiYWFFcHdpM1M5bWpVNlphamUxcHgzWmo2b2paQjdEVVFwaGdoM2NrSUpEaThxSzVtY2tIWGZhdDY=
    notifier.smtp.password.txt: OWpoejVjQnZ0RTVLVUZHcVFpOVNtTjk4c3E0ZXBsOUZZSHpjeXBUMUtDWHVxelcyTmlPYzY1c2NBTWpmbzJHd1lVWDhzS0R2YlNzVVdtZUl0c0M1VFQyZjRwQVV0aDJTTWJMZElGRXVhTXcyR0tzT3lLZmFNMkxUM1d3cVR0NVg=
    storage.encryption.key: czJoT1RDU0hPTFBXN0w1N2R4MTlRTVhQVTVUSURlaWdlSFBtUnFnVGJmdDVKcU85dkdaQmQ0blJlZGV3YmFENW5NS05nZVNhV2d3OVBvdXdkOVI1MW56Q25Bem5qR3dKQ3RndmcwVGxyRXF0VnF4ZmRPUEdDV3NZSjBQTGQ3ZXA=
    storage.postgres.password.txt: YXV0aGVsaWE=
---
# Source: authelia/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: authelia-redis-configuration
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: authelia/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: authelia-redis-health
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: authelia/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: authelia-redis-scripts
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: authelia/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: authelia
  labels: 
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/version: 4.38.9
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: authelia-0.9.3
data:
  configuration.yaml: |
    ---
    # yaml-language-server: $schema=https://www.authelia.com/schemas/v4.38/json-schema/configuration.json
    theme: 'light'
    default_2fa_method: ''
    server:
      address: 'tcp://0.0.0.0:9091/'
      asset_path: ''
      headers:
        csp_template: ''
      buffers:
        read: 4096
        write: 4096
      timeouts:
        read: '6 seconds'
        write: '6 seconds'
        idle: '30 seconds'
      endpoints:
        enable_pprof: false
        enable_expvars: false
        authz:
          auth-request:
            implementation: 'AuthRequest'
          ext-authz:
            implementation: 'ExtAuthz'
          forward-auth:
            implementation: 'ForwardAuth'
    log:
      level: 'info'
      format: 'text'
      file_path: ''
      keep_stdout: true
    telemetry:
      metrics:
        enabled: false
    identity_validation:
      elevated_session:
        code_lifespan: '5 minutes'
        elevation_lifespan: '10 minutes'
        characters: 8
        require_second_factor: false
        skip_second_factor: false
      reset_password:
        jwt_lifespan: '5 minutes'
        jwt_algorithm: 'HS256'
    totp:
      disable: false
      issuer: 'Authelia'
      skew: 1
      secret_size: 32
      algorithm: 'SHA1'
      digits: 6
      period: 30
      allowed_algorithms:
        - 'SHA1'
      allowed_digits:
        - 6
      allowed_periods:
        - 30
    webauthn:
      disable: false
      display_name: 'Authelia'
      attestation_conveyance_preference: 'indirect'
      user_verification: 'preferred'
      timeout: '60 seconds'
    ntp:
      address: 'udp://time.cloudflare.com:123'
      version: 4
      max_desync: '3 seconds'
      disable_startup_check: false
      disable_failure: false
    authentication_backend:
      password_reset:
        disable: true
        custom_url: ''
      file:
        path: '/secrets/authelia-users/users_database.yml'
        watch: false
        search:
          email: false
          case_insensitive: false
        password:
          algorithm: 'argon2'
          argon2:
            variant: 'argon2id'
            iterations: 3
            memory: 65536
            parallelism: 4
            key_length: 32
            salt_length: 16
          scrypt:
            iterations: 16
            block_size: 8
            parallelism: 1
            key_length: 32
            salt_length: 16
          pbkdf2:
            variant: 'sha512'
            iterations: 310000
            salt_length: 16
          sha2crypt:
            variant: 'sha512'
            iterations: 50000
            salt_length: 16
          bcrypt:
            variant: 'standard'
            cost: 12
    password_policy:
      standard:
        enabled: false
        min_length: 8
        max_length: 0
        require_uppercase: false
        require_lowercase: false
        require_number: false
        require_special: false
      zxcvbn:
        enabled: false
        min_score: 0
    session:
      name: 'authelia_session'
      same_site: 'lax'
      inactivity: '5 minutes'
      expiration: '1 hour'
      remember_me: '1 month'
      cookies:
        - domain: 'zengarden.space'
          authelia_url: 'https://zengarden.space'
          default_redirection_url: 'https://www.auth.zengarden.space'
      redis:
        host: 'authelia-redis-headless'
        port: 6379
        database_index: 0
        maximum_active_connections: 8
        minimum_idle_connections: 0
    regulation:
      max_retries: 3
      find_time: '2 minutes'
      ban_time: '5 minutes'
    storage:
      postgres:
        address: 'tcp://authelia-postgresql:5432'
        timeout: '5 seconds'
        database: 'authelia'
        schema: 'public'
        username: 'authelia'
    notifier:
      disable_startup_check: true
      smtp:
        address: 'smtp://smtp.gmail.com:587'
        timeout: '5 seconds'
        username: 'your-email@gmail.com'
        sender: 'Authelia <noreply@zengarden.space>'
        identifier: 'localhost'
        subject: '[Authelia] {title}'
        startup_check_address: 'test@authelia.com'
        disable_html_emails: false
        disable_require_tls: false
        disable_starttls: false
        tls:
          server_name: ''
          skip_verify: false
          minimum_version: 'TLS1.2'
          maximum_version: 'TLS1.3'
    access_control:
      default_policy: 'two_factor'
    ...
---
# Source: authelia/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: authelia-postgresql-hl
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: authelia/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: authelia/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: authelia-redis-headless
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/name: redis
---
# Source: authelia/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: authelia-redis-master
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: authelia/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: authelia
  labels: 
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/version: 4.38.9
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: authelia-0.9.3
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
---
# Source: authelia/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia
  labels: 
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/version: 4.38.9
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: authelia-0.9.3
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: authelia
      app.kubernetes.io/instance: authelia
  revisionHistoryLimit: 5
  replicas: 1
  minReadySeconds: 0
  strategy:
    type: Recreate
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: authelia
        app.kubernetes.io/instance: authelia
        app.kubernetes.io/version: 4.38.9
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: authelia-0.9.3
      annotations:
        authelia.com/checksum-config: 85ac13671745684fee69caac2866bbb7d69310ef6c7d8aa1c8d6c4e7fed2c154
        authelia.com/checksum-secret: 8fbd2bbc6afda72f3cae364d28e9e5b82fe03a6c4d61e92aa8f31877768e9c18
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      affinity: 
        nodeAffinity: {}
        podAffinity: {}
        podAntiAffinity: {}
      securityContext: 
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      enableServiceLinks: false
      containers:
      - name: authelia
        image: ghcr.io/authelia/authelia:4.38.9
        imagePullPolicy: IfNotPresent
        command: ["authelia"]
        resources: 
          limits: {}
          requests: {}
        env:
        - name: AUTHELIA_SERVER_DISABLE_HEALTHCHECK
          value: "true"
        - name: AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE
          value: '/secrets/internal/identity_validation.reset_password.jwt.hmac.key'
        - name: AUTHELIA_SESSION_SECRET_FILE
          value: '/secrets/internal/session.encryption.key'
        - name: AUTHELIA_SESSION_REDIS_PASSWORD_FILE
          value: '/secrets/internal/session.redis.password.txt'
        - name: AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
          value: '/secrets/internal/notifier.smtp.password.txt'
        - name: AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE
          value: '/secrets/internal/storage.encryption.key'
        - name: AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE
          value: '/secrets/internal/storage.postgres.password.txt'
        - name: X_AUTHELIA_CONFIG
          value: '/configuration.yaml'
        - name: X_AUTHELIA_CONFIG_FILTERS
          value: template
        startupProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9091
          protocol: TCP
        volumeMounts:
        - mountPath: /configuration.yaml
          name: config
          readOnly: true
          subPath: configuration.yaml
        - mountPath: /secrets/internal
          name: secrets
          readOnly: true
        - mountPath: /secrets/authelia-users
          name: secret-authelia-users
          readOnly: true
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: authelia
          items:
          - key: configuration.yaml
            path: configuration.yaml
      - name: secrets
        secret:
          secretName: authelia
          items:
          - key: identity_validation.reset_password.jwt.hmac.key
            path: identity_validation.reset_password.jwt.hmac.key
          - key: session.encryption.key
            path: session.encryption.key
          - key: session.redis.password.txt
            path: session.redis.password.txt
          - key: notifier.smtp.password.txt
            path: notifier.smtp.password.txt
          - key: storage.encryption.key
            path: storage.encryption.key
          - key: storage.postgres.password.txt
            path: storage.postgres.password.txt
      - name: secret-authelia-users
        secret:
          secretName: authelia-users
          items:
          - key: users_database.yml
            path: users_database.yml
---
# Source: authelia/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authelia-postgresql
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.20
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: authelia-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: authelia-postgresql
      labels:
        app.kubernetes.io/instance: authelia
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.20
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: authelia-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: authelia
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "authelia"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authelia-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authelia-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "authelia"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "authelia" -d "dbname=authelia" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "authelia" -d "dbname=authelia" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: authelia/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authelia-redis-master
  namespace: "authelia"
  labels:
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.6.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: authelia
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: authelia-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: authelia
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.6.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: authelia-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: authelia
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: authelia-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: authelia-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: authelia-redis-configuration
        - name: empty-dir
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: authelia/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authelia
  labels: 
    app.kubernetes.io/name: authelia
    app.kubernetes.io/instance: authelia
    app.kubernetes.io/version: 4.38.9
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: authelia-0.9.3
  annotations: 
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: 'auth.zengarden.space'
    http:
      paths:
        - path: '/'
          pathType: Prefix
          backend:
            service:
              name: authelia
              port:
                number: 80
  tls:
    - hosts:
        - 'auth.zengarden.space'
      secretName: authelia-tls

